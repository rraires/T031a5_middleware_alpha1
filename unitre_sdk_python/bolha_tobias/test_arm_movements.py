#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Teste de Movimentos do Bra√ßo - Rob√¥ G1 Unitree

Este script executa uma sequ√™ncia espec√≠fica de movimentos:
1. Levantar a m√£o esquerda
2. Abaixar a m√£o esquerda
3. Levantar a m√£o direita
4. Abaixar a m√£o direita

Uso: python test_arm_movements.py <interface_de_rede>
Exemplo: python test_arm_movements.py eth0
"""

import time
import sys
from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
from unitree_sdk2py.g1.arm.g1_arm_action_client import action_map

class G1ArmMovementTest:
    """Classe para controlar os movimentos de teste do bra√ßo do rob√¥ G1"""
    
    def __init__(self):
        self.arm_client = None
        self.movement_delay = 3.0  # Delay entre movimentos em segundos
        self.action_delay = 2.0    # Delay para execu√ß√£o da a√ß√£o
    
    def initialize_client(self):
        """Inicializa o cliente de a√ß√µes do bra√ßo"""
        try:
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(10.0)
            self.arm_client.Init()
            print("‚úì Cliente de a√ß√µes do bra√ßo inicializado com sucesso")
            return True
        except Exception as e:
            print(f"‚úó Erro ao inicializar cliente: {e}")
            return False
    
    def execute_action_safely(self, action_name, description):
        """Executa uma a√ß√£o com tratamento de erro"""
        try:
            action_id = action_map.get(action_name)
            if action_id is None:
                print(f"‚úó A√ß√£o '{action_name}' n√£o encontrada no mapa de a√ß√µes")
                return False
            
            print(f"ü§ñ Executando: {description}")
            result = self.arm_client.ExecuteAction(action_id)
            
            if result == 0:
                print(f"‚úì {description} - Sucesso")
                time.sleep(self.action_delay)
                return True
            else:
                print(f"‚úó {description} - Falhou (c√≥digo: {result})")
                return False
                
        except Exception as e:
            print(f"‚úó Erro ao executar {description}: {e}")
            return False
    
    def release_arms(self):
        """Libera/abaixa os bra√ßos para posi√ß√£o neutra"""
        return self.execute_action_safely("release arm", "Liberando bra√ßos (posi√ß√£o neutra)")
    
    def left_hand_up(self):
        """Levanta a m√£o esquerda"""
        # Nota: O SDK n√£o tem uma a√ß√£o espec√≠fica para "left hand up"
        # Vamos usar "hands up" e depois simular o movimento individual
        print("‚ö†Ô∏è  Simulando levantar m√£o esquerda (usando 'hands up' como aproxima√ß√£o)")
        return self.execute_action_safely("hands up", "Levantando m√£o esquerda")
    
    def right_hand_up(self):
        """Levanta a m√£o direita"""
        return self.execute_action_safely("right hand up", "Levantando m√£o direita")
    
    def run_movement_sequence(self):
        """Executa a sequ√™ncia completa de movimentos"""
        print("\n" + "="*60)
        print("üöÄ INICIANDO SEQU√äNCIA DE TESTE DE MOVIMENTOS DO BRA√áO")
        print("="*60)
        
        # Posi√ß√£o inicial - liberar bra√ßos
        print("\nüìç Fase 0: Posi√ß√£o inicial")
        if not self.release_arms():
            return False
        time.sleep(self.movement_delay)
        
        # Fase 1: Levantar m√£o esquerda
        print("\nüìç Fase 1: Levantar m√£o esquerda")
        if not self.left_hand_up():
            return False
        time.sleep(self.movement_delay)
        
        # Fase 2: Abaixar m√£o esquerda
        print("\nüìç Fase 2: Abaixar m√£o esquerda")
        if not self.release_arms():
            return False
        time.sleep(self.movement_delay)
        
        # Fase 3: Levantar m√£o direita
        print("\nüìç Fase 3: Levantar m√£o direita")
        if not self.right_hand_up():
            return False
        time.sleep(self.movement_delay)
        
        # Fase 4: Abaixar m√£o direita
        print("\nüìç Fase 4: Abaixar m√£o direita")
        if not self.release_arms():
            return False
        
        print("\n" + "="*60)
        print("‚úÖ SEQU√äNCIA DE MOVIMENTOS CONCLU√çDA COM SUCESSO!")
        print("="*60)
        return True
    
    def show_available_actions(self):
        """Mostra as a√ß√µes dispon√≠veis no action_map"""
        print("\nüìã A√ß√µes dispon√≠veis no SDK:")
        print("-" * 40)
        for action_name, action_id in action_map.items():
            print(f"  {action_name:<20} (ID: {action_id})")
        print("-" * 40)

def main():
    """Fun√ß√£o principal"""
    # Verificar argumentos da linha de comando
    if len(sys.argv) < 2:
        print("‚ùå Uso incorreto!")
        print(f"Uso: python {sys.argv[0]} <interface_de_rede>")
        print("Exemplo: python test_arm_movements.py eth0")
        print("         python test_arm_movements.py wlan0")
        sys.exit(1)
    
    network_interface = sys.argv[1]
    
    print("ü§ñ TESTE DE MOVIMENTOS DO BRA√áO - ROB√î G1 UNITREE")
    print(f"üåê Interface de rede: {network_interface}")
    
    # Aviso de seguran√ßa
    print("\n‚ö†Ô∏è  AVISO DE SEGURAN√áA:")
    print("   ‚Ä¢ Certifique-se de que n√£o h√° obst√°culos ao redor do rob√¥")
    print("   ‚Ä¢ Mantenha dist√¢ncia segura durante os movimentos")
    print("   ‚Ä¢ Tenha o bot√£o de emerg√™ncia √† m√£o")
    
    try:
        input("\nüîÑ Pressione Enter para continuar ou Ctrl+C para cancelar...")
    except KeyboardInterrupt:
        print("\n‚ùå Teste cancelado pelo usu√°rio")
        sys.exit(0)
    
    try:
        # Inicializar o canal de comunica√ß√£o
        print(f"\nüîß Inicializando canal de comunica√ß√£o ({network_interface})...")
        ChannelFactoryInitialize(0, network_interface)
        print("‚úì Canal de comunica√ß√£o inicializado")
        
        # Criar e inicializar o controlador de teste
        movement_test = G1ArmMovementTest()
        
        if not movement_test.initialize_client():
            print("‚ùå Falha na inicializa√ß√£o do cliente")
            sys.exit(1)
        
        # Mostrar a√ß√µes dispon√≠veis
        movement_test.show_available_actions()
        
        # Executar sequ√™ncia de movimentos
        success = movement_test.run_movement_sequence()
        
        if success:
            print("\nüéâ Teste conclu√≠do com sucesso!")
            sys.exit(0)
        else:
            print("\n‚ùå Teste falhou durante a execu√ß√£o")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()