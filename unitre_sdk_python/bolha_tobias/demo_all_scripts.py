#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Demonstra√ß√£o - Todos os Testes de Movimento do Bra√ßo

Este script demonstra todos os tipos de controle dispon√≠veis:
1. Controle de alto n√≠vel simples
2. Controle de alto n√≠vel completo
3. Controle de baixo n√≠vel preciso

Uso: python demo_all_scripts.py <interface_de_rede>
"""

import sys
import time
import subprocess
import os

def run_script(script_name, network_interface):
    """Executa um script e retorna o resultado"""
    try:
        print(f"\n{'='*60}")
        print(f"üöÄ EXECUTANDO: {script_name}")
        print(f"{'='*60}")
        
        # Verificar se o arquivo existe
        if not os.path.exists(script_name):
            print(f"‚ùå Erro: Arquivo {script_name} n√£o encontrado")
            return False
        
        # Executar o script
        result = subprocess.run(
            [sys.executable, script_name, network_interface],
            capture_output=True,
            text=True,
            timeout=30  # Timeout de 30 segundos
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {script_name} executado com sucesso")
            if result.stdout:
                print("üìÑ Sa√≠da:")
                print(result.stdout)
            return True
        else:
            print(f"‚ùå {script_name} falhou (c√≥digo: {result.returncode})")
            if result.stderr:
                print("üìÑ Erro:")
                print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {script_name} excedeu o tempo limite (30s)")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao executar {script_name}: {e}")
        return False

def show_menu():
    """Mostra o menu de op√ß√µes"""
    print("\n" + "="*60)
    print("ü§ñ DEMONSTRA√á√ÉO DE SCRIPTS DE MOVIMENTO DO BRA√áO G1")
    print("="*60)
    print("\nEscolha o tipo de demonstra√ß√£o:")
    print("\n1. üü¢ Controle Simples (Alto N√≠vel)")
    print("   - Execu√ß√£o r√°pida")
    print("   - A√ß√µes predefinidas")
    print("   - Mais seguro")
    print("\n2. üîµ Controle Completo (Alto N√≠vel)")
    print("   - Logs detalhados")
    print("   - Verifica√ß√µes de seguran√ßa")
    print("   - Tratamento de erros")
    print("\n3. üü° Controle Preciso (Baixo N√≠vel) ‚≠ê")
    print("   - Movimentos individuais")
    print("   - Controle motor por motor")
    print("   - Interpola√ß√£o suave")
    print("\n4. üîÑ Executar Todos em Sequ√™ncia")
    print("   - Demonstra√ß√£o completa")
    print("   - Compara√ß√£o de m√©todos")
    print("\n5. ‚ùå Sair")
    print("\n" + "-"*60)

def get_user_choice():
    """Obt√©m a escolha do usu√°rio"""
    while True:
        try:
            choice = input("\nDigite sua escolha (1-5): ").strip()
            if choice in ['1', '2', '3', '4', '5']:
                return int(choice)
            else:
                print("‚ùå Escolha inv√°lida. Digite um n√∫mero de 1 a 5.")
        except KeyboardInterrupt:
            print("\n\nüëã Saindo...")
            sys.exit(0)
        except Exception:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero de 1 a 5.")

def main():
    """Fun√ß√£o principal"""
    # Verificar argumentos
    if len(sys.argv) < 2:
        print("‚ùå Uso incorreto!")
        print(f"Uso: python {sys.argv[0]} <interface_de_rede>")
        print("Exemplo: python demo_all_scripts.py eth0")
        sys.exit(1)
    
    network_interface = sys.argv[1]
    
    # Scripts dispon√≠veis
    scripts = {
        1: "simple_arm_test.py",
        2: "test_arm_movements.py", 
        3: "precise_arm_test.py"
    }
    
    print(f"üåê Interface de rede configurada: {network_interface}")
    
    # Aviso de seguran√ßa geral
    print("\n‚ö†Ô∏è  AVISO DE SEGURAN√áA GERAL:")
    print("   ‚Ä¢ Certifique-se de que o rob√¥ G1 est√° ligado e operacional")
    print("   ‚Ä¢ Remova todos os obst√°culos ao redor do rob√¥")
    print("   ‚Ä¢ Mantenha dist√¢ncia segura durante os testes")
    print("   ‚Ä¢ Tenha o bot√£o de emerg√™ncia sempre √† m√£o")
    print("   ‚Ä¢ Interrompa imediatamente se algo parecer errado")
    
    try:
        input("\nüîÑ Pressione Enter para continuar ou Ctrl+C para cancelar...")
    except KeyboardInterrupt:
        print("\n‚ùå Demonstra√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    
    while True:
        show_menu()
        choice = get_user_choice()
        
        if choice == 5:
            print("\nüëã Encerrando demonstra√ß√£o. Obrigado!")
            break
        elif choice == 4:
            # Executar todos os scripts
            print("\nüîÑ EXECUTANDO TODOS OS SCRIPTS EM SEQU√äNCIA")
            print("‚è±Ô∏è  Isso pode levar alguns minutos...")
            
            success_count = 0
            for script_num in [1, 2, 3]:
                script_name = scripts[script_num]
                print(f"\n‚è≥ Aguardando 3 segundos antes do pr√≥ximo teste...")
                time.sleep(3)
                
                if run_script(script_name, network_interface):
                    success_count += 1
                
                print(f"\n‚è∏Ô∏è  Pausa de 5 segundos entre testes...")
                time.sleep(5)
            
            print(f"\nüìä RESUMO DA EXECU√á√ÉO:")
            print(f"   ‚úÖ Scripts executados com sucesso: {success_count}/3")
            print(f"   ‚ùå Scripts com falha: {3 - success_count}/3")
            
        elif choice in scripts:
            # Executar script espec√≠fico
            script_name = scripts[choice]
            
            print(f"\n‚ö†Ô∏è  Voc√™ est√° prestes a executar: {script_name}")
            if choice == 3:
                print("   üü° ATEN√á√ÉO: Este √© um controle de baixo n√≠vel!")
                print("   üü° Certifique-se de que entende os riscos!")
            
            try:
                confirm = input("\nü§î Deseja continuar? (s/N): ").strip().lower()
                if confirm in ['s', 'sim', 'y', 'yes']:
                    run_script(script_name, network_interface)
                else:
                    print("‚ùå Execu√ß√£o cancelada")
            except KeyboardInterrupt:
                print("\n‚ùå Execu√ß√£o cancelada pelo usu√°rio")
        
        # Pausa antes de mostrar o menu novamente
        if choice != 5:
            try:
                input("\n‚è∏Ô∏è  Pressione Enter para voltar ao menu...")
            except KeyboardInterrupt:
                print("\nüëã Encerrando demonstra√ß√£o...")
                break

if __name__ == "__main__":
    main()