#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script Simples de Teste de Movimentos do Bra√ßo - Rob√¥ G1

Sequ√™ncia de movimentos:
1. Subir m√£o esquerda
2. Abaixar m√£o esquerda  
3. Subir m√£o direita
4. Abaixar m√£o direita

Uso: python simple_arm_test.py <interface_de_rede>
"""

import time
import sys
from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
from unitree_sdk2py.g1.arm.g1_arm_action_client import action_map

def main():
    # Verificar argumentos
    if len(sys.argv) < 2:
        print(f"Uso: python {sys.argv[0]} <interface_de_rede>")
        print("Exemplo: python simple_arm_test.py eth0")
        sys.exit(1)
    
    network_interface = sys.argv[1]
    
    print("ü§ñ Teste Simples de Movimentos do Bra√ßo G1")
    print("‚ö†Ô∏è  AVISO: Certifique-se de que n√£o h√° obst√°culos ao redor do rob√¥!")
    
    try:
        input("Pressione Enter para continuar...")
    except KeyboardInterrupt:
        print("\nTeste cancelado.")
        sys.exit(0)
    
    try:
        # Inicializar comunica√ß√£o
        print(f"Inicializando comunica√ß√£o ({network_interface})...")
        ChannelFactoryInitialize(0, network_interface)
        
        # Inicializar cliente do bra√ßo
        print("Inicializando cliente do bra√ßo...")
        arm_client = G1ArmActionClient()
        arm_client.SetTimeout(10.0)
        arm_client.Init()
        
        print("\nüöÄ Iniciando sequ√™ncia de movimentos...\n")
        
        # Posi√ß√£o inicial - liberar bra√ßos
        print("0. Posi√ß√£o inicial (liberar bra√ßos)")
        arm_client.ExecuteAction(action_map["release arm"])
        time.sleep(2)
        
        # 1. Subir m√£o esquerda (usando "hands up" como aproxima√ß√£o)
        print("1. Subindo m√£o esquerda...")
        # Nota: O SDK n√£o tem a√ß√£o espec√≠fica para m√£o esquerda individual
        # Usando "hands up" como melhor aproxima√ß√£o dispon√≠vel
        arm_client.ExecuteAction(action_map["hands up"])
        time.sleep(3)
        
        # 2. Abaixar m√£o esquerda
        print("2. Abaixando m√£o esquerda...")
        arm_client.ExecuteAction(action_map["release arm"])
        time.sleep(3)
        
        # 3. Subir m√£o direita
        print("3. Subindo m√£o direita...")
        arm_client.ExecuteAction(action_map["right hand up"])
        time.sleep(3)
        
        # 4. Abaixar m√£o direita
        print("4. Abaixando m√£o direita...")
        arm_client.ExecuteAction(action_map["release arm"])
        time.sleep(2)
        
        print("\n‚úÖ Sequ√™ncia de movimentos conclu√≠da!")
        
        # Mostrar a√ß√µes dispon√≠veis para refer√™ncia
        print("\nüìã A√ß√µes dispon√≠veis no SDK:")
        for action_name, action_id in action_map.items():
            print(f"  - {action_name} (ID: {action_id})")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        print("\nVerifique se:")
        print("- O rob√¥ est√° ligado e conectado")
        print("- A interface de rede est√° correta")
        print("- O SDK est√° instalado corretamente")

if __name__ == "__main__":
    main()