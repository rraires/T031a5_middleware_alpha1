version: '3.8'

services:
  # Main middleware service
  middleware:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: t031a5_middleware
    restart: unless-stopped
    ports:
      - "8000:8000"  # REST API
      - "8001:8001"  # WebSocket
      - "9090:9090"  # Prometheus metrics
    volumes:
      - ./config.json:/app/config.json:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - /dev:/dev  # For hardware access
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app
      - TZ=${TZ:-UTC}
    networks:
      - middleware_network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: t031a5_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - middleware_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: t031a5_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - middleware_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: t031a5_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - middleware_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (React frontend)
  web_dashboard:
    build:
      context: ./web_dashboard
      dockerfile: Dockerfile
    container_name: t031a5_web_dashboard
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8001
    networks:
      - middleware_network
    depends_on:
      - middleware
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: t031a5_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - middleware_network
    depends_on:
      - middleware
      - web_dashboard
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Development override
  middleware_dev:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: t031a5_middleware_dev
    restart: "no"
    ports:
      - "8000:8000"
      - "8001:8001"
      - "9090:9090"
    volumes:
      - .:/app
      - ./config.json:/app/config.json
    environment:
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - DEVELOPMENT=true
    networks:
      - middleware_network
    command: python main.py --debug --config config.json

networks:
  middleware_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Environment variables can be set in .env file:
# LOG_LEVEL=INFO
# TZ=UTC
# GRAFANA_USER=admin
# GRAFANA_PASSWORD=secure_password
# BUILD_DATE=2024-01-15T10:30:00Z
# VCS_REF=abc123